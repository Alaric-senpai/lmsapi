generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// üë• User & Role Management
// ========================
// ========================
// üë• User & Role Management
// ========================

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     Role

  profile  Profile?
  student  Student?
  lecturer Lecturer?
  admin    Admin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Notification Notification[]
}

enum Role {
  STUDENT
  LECTURER
  ADMIN
}

model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique
  fullName String
  phone    String?

  user User @relation(fields: [userId], references: [id])
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique

  user       User        @relation(fields: [userId], references: [id])
  institutes Institute[]

  Announcement Announcement[]

  ExamPeriod ExamPeriod[]
}

model Lecturer {
  id     String @id @default(uuid())
  userId String @unique

  user               User           @relation(fields: [userId], references: [id])
  offerings          UnitOffering[]
  lessons            Lesson[]
  onlineLessons      OnlineLesson[]
  createdExams       Exam[]
  createdAssignments Assignment[]
  createdCats        Cat[]

  Feedback Feedback[]

  Resource Resource[]
}

model Student {
  id     String @id @default(uuid())
  userId String @unique

  user         User                   @relation(fields: [userId], references: [id])
  enrollments  StudentEnrollment[]
  submissions  AssignmentSubmission[]
  examAttempts ExamAttempt[]
  catAttempts  CatAttempt[]

  Transcript Transcript[]

  RemarkRequest RemarkRequest[]

  Feedback Feedback[]
}

// ========================
// üè´ Institutional Layer
// ========================

model Institute {
  id   String @id @default(uuid())
  name String
  code String @unique

  departments Department[]
  admins      Admin[]
}

model Department {
  id          String @id @default(uuid())
  name        String
  instituteId String

  institute Institute @relation(fields: [instituteId], references: [id])
  courses   Course[]
}

// ========================
// üìö Static Curriculum
// ========================

model Course {
  id           String  @id @default(uuid())
  name         String
  departmentId String
  description  String?

  department Department     @relation(fields: [departmentId], references: [id])
  units      UnitOnCourse[]
  intakes    CourseIntake[]
}

model Unit {
  id          String @id @default(uuid())
  title       String
  description String
  code        String @unique

  courses   UnitOnCourse[]
  offerings UnitOffering[]
}

model UnitOnCourse {
  courseId String
  unitId   String

  course Course @relation(fields: [courseId], references: [id])
  unit   Unit   @relation(fields: [unitId], references: [id])

  @@id([courseId, unitId])
}

// ========================
// üìÜ Academic Sessions
// ========================

model AcademicYear {
  id        String   @id @default(uuid())
  yearLabel String // e.g. "2024/2025"
  startDate DateTime
  endDate   DateTime

  intakes CourseIntake[]

  Transcript Transcript[]
}

model Semester {
  id        String   @id @default(uuid())
  name      String // e.g. "Semester 1"
  order     Int
  startDate DateTime
  endDate   DateTime

  offerings     UnitOffering[]
  lessons       Lesson[]
  onlineLessons OnlineLesson[]
  exams         Exam[]
  assignments   Assignment[]
  cats          Cat[]

  GradeReport GradeReport[]

  ExamPeriod ExamPeriod[]
}

model CourseIntake {
  id             String @id @default(uuid())
  courseId       String
  academicYearId String
  name           String // e.g. "BSc CS 2024 Cohort"

  course       Course       @relation(fields: [courseId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  enrollments   StudentEnrollment[]
  unitOfferings UnitOffering[]
  onlineLessons OnlineLesson[]
}

model UnitOffering {
  id             String @id @default(uuid())
  unitId         String
  courseIntakeId String
  lecturerId     String
  semesterId     String

  unit         Unit         @relation(fields: [unitId], references: [id])
  courseIntake CourseIntake @relation(fields: [courseIntakeId], references: [id])
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])

  lessons       Lesson[]
  onlineLessons OnlineLesson[]
  exams         Exam[]
  assignments   Assignment[]
  cats          Cat[]

  Grade Grade[]

  Feedback Feedback[]

  Resource Resource[]
}

model StudentEnrollment {
  id             String @id @default(uuid())
  studentId      String
  courseIntakeId String

  student      Student           @relation(fields: [studentId], references: [id])
  courseIntake CourseIntake      @relation(fields: [courseIntakeId], references: [id])
  progresses   StudentProgress[]

  Grade Grade[]

  GradeReport GradeReport[]
}

model Lesson {
  id             String @id @default(uuid())
  title          String
  content        String
  unitOfferingId String
  lecturerId     String
  semesterId     String

  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])

  progresses StudentProgress[]
  createdAt  DateTime          @default(now())
}

model StudentProgress {
  id                  String   @id @default(uuid())
  studentEnrollmentId String
  lessonId            String
  progress            Int // e.g., 0‚Äì100
  lastAccessedAt      DateTime @default(now())
  remarks             String?

  studentEnrollment StudentEnrollment @relation(fields: [studentEnrollmentId], references: [id])
  lesson            Lesson            @relation(fields: [lessonId], references: [id])
}

model OnlineLesson {
  id             String @id @default(uuid())
  unitOfferingId String
  lecturerId     String
  semesterId     String
  courseIntakeId String

  topic       String
  description String?
  link        String

  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])
  courseIntake CourseIntake @relation(fields: [courseIntakeId], references: [id])

  createdAt DateTime @default(now())
}

// ========================
// üìù Assessments
// ========================

model Exam {
  id              String   @id @default(uuid())
  title           String
  unitOfferingId  String
  lecturerId      String
  semesterId      String
  releaseDate     DateTime
  dueDate         DateTime
  durationMinutes Int

  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])

  questions    ExamQuestion[]
  attempts     ExamAttempt[]
  maxAttempts  Int            @default(1)
  ExamPeriod   ExamPeriod?    @relation(fields: [examPeriodId], references: [id])
  examPeriodId String?
}

model ExamPeriod {
  id          String   @id @default(uuid())
  semesterId  String
  startDate   DateTime
  endDate     DateTime
  createdById String // Admin or Registrar

  semester  Semester @relation(fields: [semesterId], references: [id])
  createdBy Admin    @relation(fields: [createdById], references: [id])
  exams     Exam[]
}

model ExamQuestion {
  id             String       @id @default(uuid())
  examId         String
  question       String
  type           QuestionType // STRUCTURED or UNSTRUCTURED
  options        String[] // For structured type only
  correctAnswers String[] // For structured type only
  maxScore       Int

  exam Exam @relation(fields: [examId], references: [id])

  ExamAnswer ExamAnswer[]
}

model ExamAttempt {
  id          String    @id @default(uuid())
  studentId   String
  examId      String
  startedAt   DateTime  @default(now())
  submittedAt DateTime?

  answers ExamAnswer[]
  student Student      @relation(fields: [studentId], references: [id])
  exam    Exam         @relation(fields: [examId], references: [id])
}

model ExamAnswer {
  id               String  @id @default(uuid())
  examAttemptId    String
  questionId       String
  response         String
  aiScore          Float? // AI-estimated percentage likelihood of being AI-generated
  awardedScore     Int?
  markedByAI       Boolean @default(false)
  markedByLecturer Boolean @default(false)

  examAttempt ExamAttempt  @relation(fields: [examAttemptId], references: [id])
  question    ExamQuestion @relation(fields: [questionId], references: [id])
}

model Assignment {
  id             String   @id @default(uuid())
  title          String
  description    String
  unitOfferingId String
  semesterId     String
  lecturerId     String
  releaseDate    DateTime
  dueDate        DateTime

  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id])

  submissions AssignmentSubmission[]
  maxAttempts Int                    @default(1)
}

model AssignmentSubmission {
  id               String   @id @default(uuid())
  assignmentId     String
  studentId        String
  submittedAt      DateTime @default(now())
  fileUrl          String?
  responseText     String?
  aiScore          Float?
  awardedScore     Int?
  markedByAI       Boolean  @default(false)
  markedByLecturer Boolean  @default(false)

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])
}

model Cat {
  id              String   @id @default(uuid())
  title           String
  unitOfferingId  String
  lecturerId      String
  semesterId      String
  releaseDate     DateTime
  dueDate         DateTime
  durationMinutes Int

  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])

  questions   CatQuestion[]
  attempts    CatAttempt[]
  maxAttempts Int           @default(1)
}

model CatQuestion {
  id             String       @id @default(uuid())
  catId          String
  question       String
  type           QuestionType
  options        String[]
  correctAnswers String[]
  maxScore       Int

  cat Cat @relation(fields: [catId], references: [id])

  CatAnswer CatAnswer[]
}

model CatAttempt {
  id          String    @id @default(uuid())
  studentId   String
  catId       String
  startedAt   DateTime  @default(now())
  submittedAt DateTime?

  answers CatAnswer[]
  student Student     @relation(fields: [studentId], references: [id])
  cat     Cat         @relation(fields: [catId], references: [id])
}

model CatAnswer {
  id               String  @id @default(uuid())
  catAttemptId     String
  questionId       String
  response         String
  aiScore          Float?
  awardedScore     Int?
  markedByAI       Boolean @default(false)
  markedByLecturer Boolean @default(false)

  catAttempt CatAttempt  @relation(fields: [catAttemptId], references: [id])
  question   CatQuestion @relation(fields: [questionId], references: [id])
}

enum QuestionType {
  STRUCTURED
  UNSTRUCTURED
}

// ========================
// üßÆ Grading & Transcripts
// ========================

model Grade {
  id             String  @id @default(uuid())
  enrollmentId   String
  unitOfferingId String
  score          Float
  grade          String // e.g., A, B, C
  remarks        String?

  enrollment   StudentEnrollment @relation(fields: [enrollmentId], references: [id])
  unitOffering UnitOffering      @relation(fields: [unitOfferingId], references: [id])

  RemarkRequest RemarkRequest[]
}

model Transcript {
  id             String   @id @default(uuid())
  studentId      String
  academicYearId String
  issuedAt       DateTime @default(now())
  fileUrl        String?

  student      Student      @relation(fields: [studentId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
}

model GradeReport {
  id           String   @id @default(uuid())
  enrollmentId String
  semesterId   String
  issuedAt     DateTime @default(now())
  fileUrl      String?

  enrollment StudentEnrollment @relation(fields: [enrollmentId], references: [id])
  semester   Semester          @relation(fields: [semesterId], references: [id])
}

// ========================
// üì¢ Admin & Staff Utilities
// ========================

model Notification {
  id          String   @id @default(uuid())
  title       String
  message     String
  recipientId String?
  roleTarget  Role?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  recipient User? @relation(fields: [recipientId], references: [id])
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String
  createdById String
  visibleTo   Role[]
  createdAt   DateTime @default(now())

  createdBy Admin @relation(fields: [createdById], references: [id])
}

model RemarkRequest {
  id         String       @id @default(uuid())
  gradeId    String
  studentId  String
  reason     String
  status     RemarkStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  reviewedBy String?
  reviewedAt DateTime?

  grade   Grade   @relation(fields: [gradeId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
}

enum RemarkStatus {
  PENDING
  APPROVED
  REJECTED
  REVISED
}

model Feedback {
  id             String   @id @default(uuid())
  studentId      String
  lecturerId     String?
  unitOfferingId String
  content        String
  rating         Int // 1‚Äì5
  createdAt      DateTime @default(now())

  student      Student      @relation(fields: [studentId], references: [id])
  lecturer     Lecturer?    @relation(fields: [lecturerId], references: [id])
  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
}

model Resource {
  id             String   @id @default(uuid())
  unitOfferingId String
  title          String
  description    String?
  fileUrl        String
  uploadedById   String
  uploadedAt     DateTime @default(now())

  uploadedBy   Lecturer     @relation(fields: [uploadedById], references: [id])
  unitOffering UnitOffering @relation(fields: [unitOfferingId], references: [id])
}
