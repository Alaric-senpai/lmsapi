
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  phone: 'phone'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.LecturerScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.InstituteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  instituteId: 'instituteId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  departmentId: 'departmentId',
  description: 'description'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  code: 'code'
};

exports.Prisma.UnitOnCourseScalarFieldEnum = {
  courseId: 'courseId',
  unitId: 'unitId'
};

exports.Prisma.AcademicYearScalarFieldEnum = {
  id: 'id',
  yearLabel: 'yearLabel',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.SemesterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.CourseIntakeScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  academicYearId: 'academicYearId',
  name: 'name'
};

exports.Prisma.UnitOfferingScalarFieldEnum = {
  id: 'id',
  unitId: 'unitId',
  courseIntakeId: 'courseIntakeId',
  lecturerId: 'lecturerId',
  semesterId: 'semesterId'
};

exports.Prisma.StudentEnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseIntakeId: 'courseIntakeId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  unitOfferingId: 'unitOfferingId',
  lecturerId: 'lecturerId',
  semesterId: 'semesterId',
  createdAt: 'createdAt'
};

exports.Prisma.StudentProgressScalarFieldEnum = {
  id: 'id',
  studentEnrollmentId: 'studentEnrollmentId',
  lessonId: 'lessonId',
  progress: 'progress',
  lastAccessedAt: 'lastAccessedAt',
  remarks: 'remarks'
};

exports.Prisma.OnlineLessonScalarFieldEnum = {
  id: 'id',
  unitOfferingId: 'unitOfferingId',
  lecturerId: 'lecturerId',
  semesterId: 'semesterId',
  courseIntakeId: 'courseIntakeId',
  topic: 'topic',
  description: 'description',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  unitOfferingId: 'unitOfferingId',
  lecturerId: 'lecturerId',
  semesterId: 'semesterId',
  releaseDate: 'releaseDate',
  dueDate: 'dueDate',
  durationMinutes: 'durationMinutes',
  maxAttempts: 'maxAttempts'
};

exports.Prisma.ExamQuestionScalarFieldEnum = {
  id: 'id',
  examId: 'examId',
  question: 'question',
  type: 'type',
  options: 'options',
  correctAnswers: 'correctAnswers',
  maxScore: 'maxScore'
};

exports.Prisma.ExamAttemptScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt'
};

exports.Prisma.ExamAnswerScalarFieldEnum = {
  id: 'id',
  examAttemptId: 'examAttemptId',
  questionId: 'questionId',
  response: 'response',
  aiScore: 'aiScore',
  awardedScore: 'awardedScore',
  markedByAI: 'markedByAI',
  markedByLecturer: 'markedByLecturer'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  unitOfferingId: 'unitOfferingId',
  semesterId: 'semesterId',
  lecturerId: 'lecturerId',
  releaseDate: 'releaseDate',
  dueDate: 'dueDate',
  maxAttempts: 'maxAttempts'
};

exports.Prisma.AssignmentSubmissionScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  studentId: 'studentId',
  submittedAt: 'submittedAt',
  fileUrl: 'fileUrl',
  responseText: 'responseText',
  aiScore: 'aiScore',
  awardedScore: 'awardedScore',
  markedByAI: 'markedByAI',
  markedByLecturer: 'markedByLecturer'
};

exports.Prisma.CatScalarFieldEnum = {
  id: 'id',
  title: 'title',
  unitOfferingId: 'unitOfferingId',
  lecturerId: 'lecturerId',
  semesterId: 'semesterId',
  releaseDate: 'releaseDate',
  dueDate: 'dueDate',
  durationMinutes: 'durationMinutes',
  maxAttempts: 'maxAttempts'
};

exports.Prisma.CatQuestionScalarFieldEnum = {
  id: 'id',
  catId: 'catId',
  question: 'question',
  type: 'type',
  options: 'options',
  correctAnswers: 'correctAnswers',
  maxScore: 'maxScore'
};

exports.Prisma.CatAttemptScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  catId: 'catId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt'
};

exports.Prisma.CatAnswerScalarFieldEnum = {
  id: 'id',
  catAttemptId: 'catAttemptId',
  questionId: 'questionId',
  response: 'response',
  aiScore: 'aiScore',
  awardedScore: 'awardedScore',
  markedByAI: 'markedByAI',
  markedByLecturer: 'markedByLecturer'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  unitOfferingId: 'unitOfferingId',
  score: 'score',
  grade: 'grade',
  remarks: 'remarks'
};

exports.Prisma.TranscriptScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  academicYearId: 'academicYearId',
  issuedAt: 'issuedAt',
  fileUrl: 'fileUrl'
};

exports.Prisma.GradeReportScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  semesterId: 'semesterId',
  issuedAt: 'issuedAt',
  fileUrl: 'fileUrl'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  recipientId: 'recipientId',
  roleTarget: 'roleTarget',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdById: 'createdById',
  visibleTo: 'visibleTo',
  createdAt: 'createdAt'
};

exports.Prisma.RemarkRequestScalarFieldEnum = {
  id: 'id',
  gradeId: 'gradeId',
  studentId: 'studentId',
  reason: 'reason',
  status: 'status',
  createdAt: 'createdAt',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  unitOfferingId: 'unitOfferingId',
  content: 'content',
  rating: 'rating',
  createdAt: 'createdAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  unitOfferingId: 'unitOfferingId',
  title: 'title',
  description: 'description',
  fileUrl: 'fileUrl',
  uploadedById: 'uploadedById',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  LECTURER: 'LECTURER',
  ADMIN: 'ADMIN'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  STRUCTURED: 'STRUCTURED',
  UNSTRUCTURED: 'UNSTRUCTURED'
};

exports.RemarkStatus = exports.$Enums.RemarkStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REVISED: 'REVISED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Admin: 'Admin',
  Lecturer: 'Lecturer',
  Student: 'Student',
  Institute: 'Institute',
  Department: 'Department',
  Course: 'Course',
  Unit: 'Unit',
  UnitOnCourse: 'UnitOnCourse',
  AcademicYear: 'AcademicYear',
  Semester: 'Semester',
  CourseIntake: 'CourseIntake',
  UnitOffering: 'UnitOffering',
  StudentEnrollment: 'StudentEnrollment',
  Lesson: 'Lesson',
  StudentProgress: 'StudentProgress',
  OnlineLesson: 'OnlineLesson',
  Exam: 'Exam',
  ExamQuestion: 'ExamQuestion',
  ExamAttempt: 'ExamAttempt',
  ExamAnswer: 'ExamAnswer',
  Assignment: 'Assignment',
  AssignmentSubmission: 'AssignmentSubmission',
  Cat: 'Cat',
  CatQuestion: 'CatQuestion',
  CatAttempt: 'CatAttempt',
  CatAnswer: 'CatAnswer',
  Grade: 'Grade',
  Transcript: 'Transcript',
  GradeReport: 'GradeReport',
  Notification: 'Notification',
  Announcement: 'Announcement',
  RemarkRequest: 'RemarkRequest',
  Feedback: 'Feedback',
  Resource: 'Resource'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
